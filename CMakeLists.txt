cmake_minimum_required(VERSION 3.0)

set(FWLIB_LIBNAME OGLFrameworkLib)
set(FWLIB_LIBNAME ${FWLIB_LIBNAME} PARENT_SCOPE)
project(${FWLIB_LIBNAME})

find_package(CUDA QUIET REQUIRED)

set(FWLIB_RESOURCE_BASE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/resources)
set(FWLIB_RESOURCE_BASE_PATH ${FWLIB_RESOURCE_BASE_PATH} PARENT_SCOPE)
set(FWLIB_CUDA_ARCH "compute_20" CACHE STRING "CUDA compute capabilities.")
set(FWLIB_CUDA_ARCH ${FWLIB_CUDA_ARCH} PARENT_SCOPE)
set(FWLIB_CUDA_CODE "sm_20" CACHE STRING "CUDA code capabilities.")
set(FWLIB_CUDA_CODE ${FWLIB_CUDA_CODE} PARENT_SCOPE)

if(MSVC)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/glrenderer/Font.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/Mesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/ObjMesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/SubMesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
endif()

LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=${FWLIB_CUDA_ARCH},code=${FWLIB_CUDA_CODE})

file(GLOB_RECURSE LIB_RES_FILES ${FWLIB_RESOURCE_BASE_PATH}/*.*)
file(GLOB LIB_TOP_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.h
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cu)
file(GLOB_RECURSE LIB_TMP_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.h
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cu)
LIST(REMOVE_ITEM LIB_TMP_FILES ${LIB_RES_FILES})
LIST(REMOVE_ITEM LIB_TMP_FILES ${LIB_TOP_FILES})

foreach(f ${LIB_TMP_FILES})
    file(RELATIVE_PATH SRCGR ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME} ${f})
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()
source_group(" " FILES ${LIB_TOP_FILES})


foreach(f ${LIB_RES_FILES})
    file(RELATIVE_PATH SRCGR ${FWLIB_RESOURCE_BASE_PATH} ${f})
	set(SRCGR "Resources/${SRCGR}")
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()

file(GLOB_RECURSE LIB_RES_OBJ_FILES ${FWLIB_RESOURCE_BASE_PATH}/*.obj)
foreach(f ${LIB_RES_OBJ_FILES})
	set_source_files_properties(${f} PROPERTIES HEADER_FILE_ONLY TRUE)
endforeach()

file(GLOB EXTERN_SOURCES extern/imgui/imgui.cpp extern/imgui/imgui_draw.cpp)
source_group("Extern" FILES ${EXTERN_SOURCES})


file(GLOB LIB_CONFIGS CMakeLists.txt Readme.md .gitattributes .gitignore .gitmodules)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME} extern/imgui/)
cuda_add_library(${FWLIB_LIBNAME} ${LIB_TMP_FILES} ${LIB_TOP_FILES} ${LIB_RES_FILES} ${LIB_CONFIGS} ${EXTERN_SOURCES} SHARED)
target_include_directories(${FWLIB_LIBNAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME})

target_link_libraries(${FWLIB_LIBNAME} FreeImage glew32 opengl32)
set_property(TARGET ${FWLIB_LIBNAME} APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:DebugOpenGLCalls>:_OGL_DEBUG_MSGS> _CRT_SECURE_NO_WARNINGS)
