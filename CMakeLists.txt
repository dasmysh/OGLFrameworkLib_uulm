cmake_minimum_required(VERSION 3.4)

set(FWLIB_LIBNAME OGLFrameworkLib)
set(FWLIB_LIBNAME ${FWLIB_LIBNAME} PARENT_SCOPE)
project(${FWLIB_LIBNAME})

find_package(CUDA QUIET REQUIRED)
find_package(Boost 1.58.0 REQUIRED)
link_directories(${Boost_LIBRARY_DIRS})

option(GLFW_BUILD_DOCS OFF)
option(GLFW_BUILD_EXAMPLES OFF)
option(GLFW_BUILD_TESTS OFF)
add_subdirectory(extern/glfw)

option(ASSIMP_BUILD_ASSIMP_TOOLS OFF)
option(ASSIMP_BUILD_SAMPLES OFF)
option(ASSIMP_BUILD_TESTS OFF)
option(ASSIMP_NO_EXPORT ON)

# Disable all unused importers
option(ASSIMP_BUILD_3DS_IMPORTER OFF)
option(ASSIMP_BUILD_3D_IMPORTER OFF)
option(ASSIMP_BUILD_3MF_IMPORTER OFF)
option(ASSIMP_BUILD_AC_IMPORTER OFF)
option(ASSIMP_BUILD_AMF_IMPORTER OFF)
option(ASSIMP_BUILD_AMF_IMPORTER OFF)
option(ASSIMP_BUILD_ASE_IMPORTER OFF)
option(ASSIMP_BUILD_ASSBIN_IMPORTER OFF)
option(ASSIMP_BUILD_ASSXML_IMPORTER OFF)
option(ASSIMP_BUILD_B3D_IMPORTER OFF)
option(ASSIMP_BUILD_BLEND_IMPORTER OFF)
option(ASSIMP_BUILD_BVH_IMPORTER OFF)
option(ASSIMP_BUILD_COB_IMPORTER OFF)
option(ASSIMP_BUILD_CSM_IMPORTER OFF)
option(ASSIMP_BUILD_DXF_IMPORTER OFF)
option(ASSIMP_BUILD_GLTF_IMPORTER OFF)
option(ASSIMP_BUILD_HMP_IMPORTER OFF)
option(ASSIMP_BUILD_IFC_IMPORTER OFF)
option(ASSIMP_BUILD_IRRMESH_IMPORTER OFF)
option(ASSIMP_BUILD_IRR_IMPORTER OFF)
option(ASSIMP_BUILD_LWO_IMPORTER OFF)
option(ASSIMP_BUILD_LWS_IMPORTER OFF)
option(ASSIMP_BUILD_MD2_IMPORTER OFF)
option(ASSIMP_BUILD_MD3_IMPORTER OFF)
option(ASSIMP_BUILD_MD5_IMPORTER OFF)
option(ASSIMP_BUILD_MDC_IMPORTER OFF)
option(ASSIMP_BUILD_MDL_IMPORTER OFF)
option(ASSIMP_BUILD_MS3D_IMPORTER OFF)
option(ASSIMP_BUILD_NDO_IMPORTER OFF)
option(ASSIMP_BUILD_NFF_IMPORTER OFF)
option(ASSIMP_BUILD_NONFREE_C4D_IMPORTER OFF)
option(ASSIMP_BUILD_OFF_IMPORTER OFF)
option(ASSIMP_BUILD_OGRE_IMPORTER OFF)
option(ASSIMP_BUILD_OPENGEX_IMPORTER OFF)
option(ASSIMP_BUILD_Q3BSP_IMPORTER OFF)
option(ASSIMP_BUILD_Q3D_IMPORTER OFF)
option(ASSIMP_BUILD_RAW_IMPORTER OFF)
option(ASSIMP_BUILD_SIB_IMPORTER OFF)
option(ASSIMP_BUILD_SMD_IMPORTER OFF)
option(ASSIMP_BUILD_TERRAGEN_IMPORTER OFF)
option(ASSIMP_BUILD_X3D_IMPORTER OFF)
option(ASSIMP_BUILD_XGL_IMPORTER OFF)
option(ASSIMP_BUILD_X_IMPORTER OFF)
add_subdirectory(extern/assimp)
SET(CMAKE_DEBUG_POSTFIX "")

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /WX /EHsc")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unused-function -Wno-unused-parameter -Wextra -Wpedantic -std=c++14")
    if(NOT WIN32)
        set(GLAD_LIBRARIES dl)
    endif()
endif()

set(FWLIB_DO_PROFILING ON CACHE BOOL "Turn on profiling.")
set(FWLIB_DO_PROFILING ${FWLIB_DO_PROFILING} PARENT_SCOPE)
set(FWLIB_RESOURCE_BASE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/resources)
set(FWLIB_RESOURCE_BASE_PATH ${FWLIB_RESOURCE_BASE_PATH} PARENT_SCOPE)
set(FWLIB_CUDA_ARCH "compute_20" CACHE STRING "CUDA compute capabilities.")
set(FWLIB_CUDA_ARCH ${FWLIB_CUDA_ARCH} PARENT_SCOPE)
set(FWLIB_CUDA_CODE "sm_20" CACHE STRING "CUDA code capabilities.")
set(FWLIB_CUDA_CODE ${FWLIB_CUDA_CODE} PARENT_SCOPE)

if(MSVC)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/glrenderer/Font.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/mesh/Mesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/mesh/ObjMesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
	SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/gfx/mesh/SubMesh.cpp PROPERTIES COMPILE_FLAGS /wd4503)
endif()

LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=${FWLIB_CUDA_ARCH},code=${FWLIB_CUDA_CODE})

file(GLOB_RECURSE LIB_RES_FILES ${FWLIB_RESOURCE_BASE_PATH}/*.*)
file(GLOB LIB_TOP_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.h
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cu)
file(GLOB_RECURSE LIB_TMP_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.h
    ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME}/*.cu)
LIST(REMOVE_ITEM LIB_TMP_FILES ${LIB_RES_FILES})
LIST(REMOVE_ITEM LIB_TMP_FILES ${LIB_TOP_FILES})

foreach(f ${LIB_TMP_FILES})
    file(RELATIVE_PATH SRCGR ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME} ${f})
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()
source_group(" " FILES ${LIB_TOP_FILES})


foreach(f ${LIB_RES_FILES})
    file(RELATIVE_PATH SRCGR ${FWLIB_RESOURCE_BASE_PATH} ${f})
	set(SRCGR "Resources/${SRCGR}")
    string(REGEX REPLACE "(.*)(/[^/]*)$" "\\1" SRCGR ${SRCGR})
    string(REPLACE / \\ SRCGR ${SRCGR})
    source_group("${SRCGR}" FILES ${f})
endforeach()

file(GLOB_RECURSE LIB_RES_OBJ_FILES ${FWLIB_RESOURCE_BASE_PATH}/*.obj)
foreach(f ${LIB_RES_OBJ_FILES})
	set_source_files_properties(${f} PROPERTIES HEADER_FILE_ONLY TRUE)
endforeach()

file(GLOB EXTERN_SOURCES extern/glad/src/glad.c extern/glad/src/glad_wgl.c extern/imgui/imgui.cpp extern/imgui/imgui_draw.cpp)
source_group("Extern" FILES ${EXTERN_SOURCES})


file(GLOB LIB_CONFIGS CMakeLists.txt Readme.md .gitattributes .gitignore .gitmodules)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME} extern/glfw/include/ extern/imgui/ extern/glm/ extern/assimp/include/ extern/glad/include/ extern/stb/ ${Boost_INCLUDE_DIRS}  extern/imgui/examples/opengl3_example/)
cuda_add_library(${FWLIB_LIBNAME} ${LIB_TMP_FILES} ${LIB_TOP_FILES} ${LIB_RES_FILES} ${LIB_CONFIGS} ${EXTERN_SOURCES} SHARED)
target_include_directories(${FWLIB_LIBNAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/${FWLIB_LIBNAME} extern/glfw/include/ extern/imgui/ extern/glm/ extern/assimp/include/ extern/glad/include/ extern/stb/ ${Boost_INCLUDE_DIRS})

target_link_libraries(${FWLIB_LIBNAME} assimp glfw ${GLFW_LIBRARIES} ${GLAD_LIBRARIES} opengl32)
set_property(TARGET ${FWLIB_LIBNAME} APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:DebugOpenGLCalls>:_OGL_DEBUG_MSGS> _CRT_SECURE_NO_WARNINGS _SCL_SECURE_NO_WARNINGS)
if (FWLIB_DO_PROFILING)
    target_compile_definitions(${FWLIB_LIBNAME} PUBLIC ENABLE_PROFILING)
endif()	
